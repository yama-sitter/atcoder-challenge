// 1. 配列の未整列部分から値を1つ取り出す
// 2. 整列部分を走査し、取り出した値と比較する
// 3. 取り出した値の方が小さくなるまで走査を繰り返し、その都度整列部分をそれぞれ1つ後ろにズラす
// 4. 取り出した値の方が小さくなったタイミングで整列部分に挿入する
// 5. 1~4を繰り返し、配列の全データを整列済みにしたら完了
export function insertionSort(arr: number[]) {
	const _arr = arr.slice();

	// 配列の0番目は「整列されている」という前提で走査するため、i = 1から開始
	for (let i = 1; i < _arr.length; i++) {
		// 未整列部分から値を取り出す
		const tmp = _arr[i];

		// 整列部分の最終インデックス
		let j = i - 1;

		// 取り出した値の方が小さくなるまで整列部分を逆順に走査
		while (j >= 0 && tmp < _arr[j]) {
			// （取り出した値を含む範囲までで）1つずつ後ろにズラす
			_arr[j + 1] = _arr[j];
			j--;
		}

		// 適切な位置（_arr[j]より大きいことが分かっているので、j + 1になる）にtmpを挿入
		_arr[j + 1] = tmp;
	}

	return _arr;
}
